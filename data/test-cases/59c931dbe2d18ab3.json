{"uid":"59c931dbe2d18ab3","name":"Test Menu and Submenu Navigation","fullName":"test_main#test_nested_menu","historyId":"c77461d0edaaf13a8c5f0f3cb3eed216","time":{"start":1727284164689,"stop":1727284165780,"duration":1091},"description":"Test to ensure that menu and submenu links lead to correct pages.","descriptionHtml":"<p>Test to ensure that menu and submenu links lead to correct pages.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":60,\"value\":\"https://tutorialsninja.com/demo/index.php?route=product/category&path=20_26 has no size and location\"}\n  (Session info: chrome=129.0.6668.70)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6221CB125+29573]\n\t(No symbol) [0x00007FF62213FF50]\n\t(No symbol) [0x00007FF621FFB6EA]\n\t(No symbol) [0x00007FF6220022BE]\n\t(No symbol) [0x00007FF622004637]\n\t(No symbol) [0x00007FF6220046F0]\n\t(No symbol) [0x00007FF6220568E3]\n\t(No symbol) [0x00007FF622055B66]\n\t(No symbol) [0x00007FF6220A283A]\n\t(No symbol) [0x00007FF6220772FA]\n\t(No symbol) [0x00007FF6220986BC]\n\t(No symbol) [0x00007FF6220770A3]\n\t(No symbol) [0x00007FF6220412DF]\n\t(No symbol) [0x00007FF622042441]\n\tGetHandleVerifier [0x00007FF6224FC76D+3377613]\n\tGetHandleVerifier [0x00007FF622547B67+3685831]\n\tGetHandleVerifier [0x00007FF62253CF8B+3641835]\n\tGetHandleVerifier [0x00007FF62228B2A6+816390]\n\t(No symbol) [0x00007FF62214B25F]\n\t(No symbol) [0x00007FF622147084]\n\t(No symbol) [0x00007FF622147220]\n\t(No symbol) [0x00007FF62213607F]\n\tBaseThreadInitThunk [0x00007FF8B83C257D+29]\n\tRtlUserThreadStart [0x00007FF8B934AF28+40]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f206a937c963112e64222bff2fda57a9\")>, menu_locator = ('partial link text', 'Desktops')\nsubmenu_locator = ('xpath', '//*[@id=\"menu\"]/div[2]/ul/li[1]/div/div/ul/li[1]/a'), result_text = 'PC'\n\n    @pytest.mark.parametrize(\"menu_locator, submenu_locator, result_text\", [\n        (\n                (By.PARTIAL_LINK_TEXT, 'Desktops'),\n                (By.XPATH, '//*[@id=\"menu\"]/div[2]/ul/li[1]/div/div/ul/li[1]/a'),\n                'PC'\n        ),\n        (\n                (By.PARTIAL_LINK_TEXT, 'Desktops'),\n                (By.XPATH, '//*[@id=\"menu\"]/div[2]/ul/li[1]/div/div/ul/li[2]/a'),\n                'Mac'\n        ),\n        (\n                (By.PARTIAL_LINK_TEXT, 'Laptops & Notebooks'),\n                (By.XPATH, '//*[@id=\"menu\"]/div[2]/ul/li[2]/div/div/ul/li[1]/a'),\n                'Macs'\n        ),\n        (\n                (By.PARTIAL_LINK_TEXT, 'Laptops & Notebooks'),\n                (By.XPATH, '//*[@id=\"menu\"]/div[2]/ul/li[2]/div/div/ul/li[2]/a'),\n                'Windows'\n        )\n    ])\n    @allure.feature('Menu Navigation')\n    @allure.suite('Menu Test Suite')\n    @allure.title('Test Menu and Submenu Navigation')\n    @allure.description('Test to ensure that menu and submenu links lead to correct pages.')\n    @allure.severity(\"critical\")\n    def test_nested_menu(driver, menu_locator, submenu_locator, result_text):\n        with allure.step(\"Open the TutorialsNinja demo site\"):\n            driver.get(\"https://tutorialsninja.com/demo/\")\n    \n        with allure.step(f\"Hover over the menu and select submenu: {result_text}\"):\n            menu = driver.find_element(*menu_locator)\n            submenu = driver.find_element(*submenu_locator)\n>           ActionChains(driver).move_to_element(menu).click(submenu).perform()\n\ntest_main.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000213FC377F80>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: {\\\\\"status\\\\\":60,\\\\\"value\\...07FF62213607F]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8B83C257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF8B934AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":60,\"value\":\"https://tutorialsninja.com/demo/index.php?route=product/category&path=20_26 has no size and location\"}\nE         (Session info: chrome=129.0.6668.70)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6221CB125+29573]\nE       \t(No symbol) [0x00007FF62213FF50]\nE       \t(No symbol) [0x00007FF621FFB6EA]\nE       \t(No symbol) [0x00007FF6220022BE]\nE       \t(No symbol) [0x00007FF622004637]\nE       \t(No symbol) [0x00007FF6220046F0]\nE       \t(No symbol) [0x00007FF6220568E3]\nE       \t(No symbol) [0x00007FF622055B66]\nE       \t(No symbol) [0x00007FF6220A283A]\nE       \t(No symbol) [0x00007FF6220772FA]\nE       \t(No symbol) [0x00007FF6220986BC]\nE       \t(No symbol) [0x00007FF6220770A3]\nE       \t(No symbol) [0x00007FF6220412DF]\nE       \t(No symbol) [0x00007FF622042441]\nE       \tGetHandleVerifier [0x00007FF6224FC76D+3377613]\nE       \tGetHandleVerifier [0x00007FF622547B67+3685831]\nE       \tGetHandleVerifier [0x00007FF62253CF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF62228B2A6+816390]\nE       \t(No symbol) [0x00007FF62214B25F]\nE       \t(No symbol) [0x00007FF622147084]\nE       \t(No symbol) [0x00007FF622147220]\nE       \t(No symbol) [0x00007FF62213607F]\nE       \tBaseThreadInitThunk [0x00007FF8B83C257D+29]\nE       \tRtlUserThreadStart [0x00007FF8B934AF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: JavascriptException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1727284141319,"stop":1727284146279,"duration":4960},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Test to ensure that menu and submenu links lead to correct pages.","status":"broken","statusMessage":"selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":60,\"value\":\"https://tutorialsninja.com/demo/index.php?route=product/category&path=20_26 has no size and location\"}\n  (Session info: chrome=129.0.6668.70)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6221CB125+29573]\n\t(No symbol) [0x00007FF62213FF50]\n\t(No symbol) [0x00007FF621FFB6EA]\n\t(No symbol) [0x00007FF6220022BE]\n\t(No symbol) [0x00007FF622004637]\n\t(No symbol) [0x00007FF6220046F0]\n\t(No symbol) [0x00007FF6220568E3]\n\t(No symbol) [0x00007FF622055B66]\n\t(No symbol) [0x00007FF6220A283A]\n\t(No symbol) [0x00007FF6220772FA]\n\t(No symbol) [0x00007FF6220986BC]\n\t(No symbol) [0x00007FF6220770A3]\n\t(No symbol) [0x00007FF6220412DF]\n\t(No symbol) [0x00007FF622042441]\n\tGetHandleVerifier [0x00007FF6224FC76D+3377613]\n\tGetHandleVerifier [0x00007FF622547B67+3685831]\n\tGetHandleVerifier [0x00007FF62253CF8B+3641835]\n\tGetHandleVerifier [0x00007FF62228B2A6+816390]\n\t(No symbol) [0x00007FF62214B25F]\n\t(No symbol) [0x00007FF622147084]\n\t(No symbol) [0x00007FF622147220]\n\t(No symbol) [0x00007FF62213607F]\n\tBaseThreadInitThunk [0x00007FF8B83C257D+29]\n\tRtlUserThreadStart [0x00007FF8B934AF28+40]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f206a937c963112e64222bff2fda57a9\")>, menu_locator = ('partial link text', 'Desktops')\nsubmenu_locator = ('xpath', '//*[@id=\"menu\"]/div[2]/ul/li[1]/div/div/ul/li[1]/a'), result_text = 'PC'\n\n    @pytest.mark.parametrize(\"menu_locator, submenu_locator, result_text\", [\n        (\n                (By.PARTIAL_LINK_TEXT, 'Desktops'),\n                (By.XPATH, '//*[@id=\"menu\"]/div[2]/ul/li[1]/div/div/ul/li[1]/a'),\n                'PC'\n        ),\n        (\n                (By.PARTIAL_LINK_TEXT, 'Desktops'),\n                (By.XPATH, '//*[@id=\"menu\"]/div[2]/ul/li[1]/div/div/ul/li[2]/a'),\n                'Mac'\n        ),\n        (\n                (By.PARTIAL_LINK_TEXT, 'Laptops & Notebooks'),\n                (By.XPATH, '//*[@id=\"menu\"]/div[2]/ul/li[2]/div/div/ul/li[1]/a'),\n                'Macs'\n        ),\n        (\n                (By.PARTIAL_LINK_TEXT, 'Laptops & Notebooks'),\n                (By.XPATH, '//*[@id=\"menu\"]/div[2]/ul/li[2]/div/div/ul/li[2]/a'),\n                'Windows'\n        )\n    ])\n    @allure.feature('Menu Navigation')\n    @allure.suite('Menu Test Suite')\n    @allure.title('Test Menu and Submenu Navigation')\n    @allure.description('Test to ensure that menu and submenu links lead to correct pages.')\n    @allure.severity(\"critical\")\n    def test_nested_menu(driver, menu_locator, submenu_locator, result_text):\n        with allure.step(\"Open the TutorialsNinja demo site\"):\n            driver.get(\"https://tutorialsninja.com/demo/\")\n    \n        with allure.step(f\"Hover over the menu and select submenu: {result_text}\"):\n            menu = driver.find_element(*menu_locator)\n            submenu = driver.find_element(*submenu_locator)\n>           ActionChains(driver).move_to_element(menu).click(submenu).perform()\n\ntest_main.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000213FC377F80>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: {\\\\\"status\\\\\":60,\\\\\"value\\...07FF62213607F]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8B83C257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF8B934AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":60,\"value\":\"https://tutorialsninja.com/demo/index.php?route=product/category&path=20_26 has no size and location\"}\nE         (Session info: chrome=129.0.6668.70)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6221CB125+29573]\nE       \t(No symbol) [0x00007FF62213FF50]\nE       \t(No symbol) [0x00007FF621FFB6EA]\nE       \t(No symbol) [0x00007FF6220022BE]\nE       \t(No symbol) [0x00007FF622004637]\nE       \t(No symbol) [0x00007FF6220046F0]\nE       \t(No symbol) [0x00007FF6220568E3]\nE       \t(No symbol) [0x00007FF622055B66]\nE       \t(No symbol) [0x00007FF6220A283A]\nE       \t(No symbol) [0x00007FF6220772FA]\nE       \t(No symbol) [0x00007FF6220986BC]\nE       \t(No symbol) [0x00007FF6220770A3]\nE       \t(No symbol) [0x00007FF6220412DF]\nE       \t(No symbol) [0x00007FF622042441]\nE       \tGetHandleVerifier [0x00007FF6224FC76D+3377613]\nE       \tGetHandleVerifier [0x00007FF622547B67+3685831]\nE       \tGetHandleVerifier [0x00007FF62253CF8B+3641835]\nE       \tGetHandleVerifier [0x00007FF62228B2A6+816390]\nE       \t(No symbol) [0x00007FF62214B25F]\nE       \t(No symbol) [0x00007FF622147084]\nE       \t(No symbol) [0x00007FF622147220]\nE       \t(No symbol) [0x00007FF62213607F]\nE       \tBaseThreadInitThunk [0x00007FF8B83C257D+29]\nE       \tRtlUserThreadStart [0x00007FF8B934AF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: JavascriptException","steps":[{"name":"Open the TutorialsNinja demo site","time":{"start":1727284164689,"stop":1727284165078,"duration":389},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false},{"name":"Hover over the menu and select submenu: PC","time":{"start":1727284165078,"stop":1727284165708,"duration":630},"status":"broken","statusMessage":"selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":60,\"value\":\"https://tutorialsninja.com/demo/index.php?route=product/category&path=20_26 has no size and location\"}\n  (Session info: chrome=129.0.6668.70)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6221CB125+29573]\n\t(No symbol) [0x00007FF62213FF50]\n\t(No symbol) [0x00007FF621FFB6EA]\n\t(No symbol) [0x00007FF6220022BE]\n\t(No symbol) [0x00007FF622004637]\n\t(No symbol) [0x00007FF6220046F0]\n\t(No symbol) [0x00007FF6220568E3]\n\t(No symbol) [0x00007FF622055B66]\n\t(No symbol) [0x00007FF6220A283A]\n\t(No symbol) [0x00007FF6220772FA]\n\t(No symbol) [0x00007FF6220986BC]\n\t(No symbol) [0x00007FF6220770A3]\n\t(No symbol) [0x00007FF6220412DF]\n\t(No symbol) [0x00007FF622042441]\n\tGetHandleVerifier [0x00007FF6224FC76D+3377613]\n\tGetHandleVerifier [0x00007FF622547B67+3685831]\n\tGetHandleVerifier [0x00007FF62253CF8B+3641835]\n\tGetHandleVerifier [0x00007FF62228B2A6+816390]\n\t(No symbol) [0x00007FF62214B25F]\n\t(No symbol) [0x00007FF622147084]\n\t(No symbol) [0x00007FF622147220]\n\t(No symbol) [0x00007FF62213607F]\n\tBaseThreadInitThunk [0x00007FF8B83C257D+29]\n\tRtlUserThreadStart [0x00007FF8B934AF28+40]\n\n","statusTrace":"  File \"C:\\Users\\mobce\\OneDrive\\Desktop\\qa\\selenium-project2\\test_main.py\", line 91, in test_nested_menu\n    ActionChains(driver).move_to_element(menu).click(submenu).perform()\n  File \"C:\\Users\\mobce\\OneDrive\\Desktop\\qa\\selenium-project2\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py\", line 94, in perform\n    self.w3c_actions.perform()\n  File \"C:\\Users\\mobce\\OneDrive\\Desktop\\qa\\selenium-project2\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py\", line 96, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"C:\\Users\\mobce\\OneDrive\\Desktop\\qa\\selenium-project2\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\mobce\\OneDrive\\Desktop\\qa\\selenium-project2\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1727284197114,"stop":1727284207404,"duration":10290},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"Menu Test Suite"},{"name":"severity","value":"critical"},{"name":"feature","value":"Menu Navigation"},{"name":"host","value":"DESKTOP-M3DODVL"},{"name":"thread","value":"11992-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_main"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"menu_locator","value":"('partial link text', 'Desktops')"},{"name":"result_text","value":"'PC'"},{"name":"submenu_locator","value":"('xpath', '//*[@id=\"menu\"]/div[2]/ul/li[1]/div/div/ul/li[1]/a')"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"59c931dbe2d18ab3.json","parameterValues":["('partial link text', 'Desktops')","'PC'","('xpath', '//*[@id=\"menu\"]/div[2]/ul/li[1]/div/div/ul/li[1]/a')"]}